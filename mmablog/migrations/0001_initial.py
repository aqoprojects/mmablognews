# Generated by Django 5.2.1 on 2025-05-29 22:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=250)),
                ('email', models.EmailField(blank=True, max_length=250, null=True)),
                ('subject', models.CharField(blank=True, max_length=280, null=True)),
                ('message', models.CharField(max_length=400)),
                ('contacted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('ip_information', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='author_profile_picture/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='mmablog_blo_name_c845a3_idx')],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('topic_image', models.ImageField(blank=True, null=True, upload_to='blogPhotos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'jpg', 'png'])])),
                ('topic', models.CharField(blank=True, max_length=250, null=True)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('article', models.TextField(blank=True, null=True)),
                ('total_clicks', models.BigIntegerField(default=0)),
                ('total_comments', models.BigIntegerField(default=0)),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('author', models.ManyToManyField(related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mmablog.blogcategory')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_publisher', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                # 'db_tablespace': 'BPtableIndexStorage',
            },
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=250)),
                ('email', models.EmailField(blank=True, max_length=250, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('message', models.CharField(max_length=400)),
                ('comment_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('ip_information', models.JSONField(blank=True, null=True)),
                ('blogheadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mmablog.blogpost')),
            ],
            options={
                # 'db_tablespace': 'BCMtableIndexStorage',
            },
        ),
        migrations.CreateModel(
            name='BlogSubPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('topic_image', models.ImageField(blank=True, null=True, upload_to='blog/BlogExtraPhotos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'jpg', 'png'])])),
                ('topic', models.CharField(blank=True, max_length=250, null=True)),
                ('article', models.TextField(blank=True, null=True)),
                ('total_clicks', models.BigIntegerField(default=0)),
                ('total_comments', models.BigIntegerField(default=0)),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('author', models.ManyToManyField(related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('blogheadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mmablog.blogpost')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mmablog.blogcategory')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_publisher', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-topic_image'],
                # 'db_tablespace': 'BSPtableIndexStorage',
            },
        ),
        migrations.CreateModel(
            name='BlogViewCount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('ip_information', models.JSONField(blank=True, null=True)),
                ('viewed_date', models.DateTimeField(auto_now_add=True)),
                ('blogheadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mmablog.blogpost')),
            ],
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['topic_image', 'topic', 'article', 'posted_date'], name='mmablog_blo_topic_i_970a12_idx'),
        ),
        migrations.AddIndex(
            model_name='blogcomment',
            index=models.Index(fields=['name', 'message', 'comment_date'], name='mmablog_blo_name_8342ae_idx'),
        ),
        migrations.AddIndex(
            model_name='blogsubpost',
            index=models.Index(fields=['topic_image', 'topic', 'article', 'posted_date'], name='mmablog_blo_topic_i_9f9e56_idx'),
        ),
    ]
